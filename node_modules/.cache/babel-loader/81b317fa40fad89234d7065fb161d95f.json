{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = require(\"react\");\n\nvar useDragDropManager_1 = require(\"./internal/useDragDropManager\");\n\nvar useDropTargetMonitor_1 = require(\"./internal/useDropTargetMonitor\");\n\nvar useMonitorOutput_1 = require(\"./internal/useMonitorOutput\");\n\nvar invariant = require('invariant');\n/**\n * useDropTarget Hook (This API is experimental and subject to breaking changes in non-breaking versions)\n * @param spec The drop target specification\n */\n\n\nfunction useDrop(spec) {\n  var accept = spec.accept,\n      options = spec.options,\n      collect = spec.collect;\n  invariant(accept != null, 'accept must be defined');\n  var ref = spec.ref;\n\n  if (!ref) {\n    ref = react_1.useRef(null);\n  }\n\n  var manager = useDragDropManager_1.useDragDropManager();\n  var backend = manager.getBackend();\n  var monitor = useDropTargetMonitor_1.useDropTargetMonitor(manager, spec);\n  /*\n   * Connect the Drop Target Element to the Backend\n   */\n\n  react_1.useEffect(function connectDropTarget() {\n    if (ref.current) {\n      var node = ref.current;\n\n      if (node) {\n        return backend.connectDropTarget(monitor.getHandlerId(), node, options);\n      }\n    }\n  });\n  var result = collect ? useMonitorOutput_1.useMonitorOutput(monitor, collect) : {};\n  return [result, ref];\n}\n\nexports.useDrop = useDrop;","map":null,"metadata":{},"sourceType":"script"}