{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = require(\"react\");\n\nvar DragSourceMonitorImpl_1 = require(\"../../DragSourceMonitorImpl\");\n\nvar registerSource_1 = require(\"../../registerSource\");\n\nfunction useDragSourceMonitor(manager, sourceSpec) {\n  var sourceSpecRef = react_1.useRef(sourceSpec);\n  react_1.useEffect(function () {\n    sourceSpecRef.current = sourceSpec;\n  });\n  var monitor = react_1.useMemo(function () {\n    return new DragSourceMonitorImpl_1.default(manager);\n  }, [manager]);\n  react_1.useEffect(function registerSourceWithMonitor() {\n    var _a = registerSource_1.default(sourceSpec.item.type, handler, manager),\n        handlerId = _a.handlerId,\n        unregister = _a.unregister;\n\n    monitor.receiveHandlerId(handlerId);\n    return unregister;\n  }, [monitor]); // Can't use createSourceFactory, as semantics are different\n\n  var handler = react_1.useMemo(function () {\n    return {\n      beginDrag: function beginDrag() {\n        var _a = sourceSpecRef.current,\n            begin = _a.begin,\n            item = _a.item;\n\n        if (begin) {\n          begin(monitor);\n        }\n\n        return item || {};\n      },\n      canDrag: function canDrag() {\n        var canDrag = sourceSpecRef.current.canDrag;\n        return canDrag ? canDrag(monitor) : true;\n      },\n      isDragging: function isDragging(globalMonitor, target) {\n        var isDragging = sourceSpecRef.current.isDragging;\n        return isDragging ? isDragging(monitor) : target === globalMonitor.getSourceId();\n      },\n      endDrag: function endDrag() {\n        var end = sourceSpecRef.current.end;\n\n        if (end) {\n          end(monitor.getItem(), monitor);\n        }\n      }\n    };\n  }, []);\n  return monitor;\n}\n\nexports.useDragSourceMonitor = useDragSourceMonitor;","map":null,"metadata":{},"sourceType":"script"}