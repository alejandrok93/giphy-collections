{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar DropTargetMonitorImpl_1 = require(\"../../DropTargetMonitorImpl\");\n\nvar registerTarget_1 = require(\"../../registerTarget\");\n\nfunction useDropTargetMonitor(manager, targetSpec) {\n  var targetSpecRef = React.useRef(targetSpec);\n  React.useEffect(function updateDropTargetSpec() {\n    targetSpecRef.current = targetSpec;\n  });\n  var monitor = React.useMemo(function () {\n    return new DropTargetMonitorImpl_1.default(manager);\n  }, [manager]);\n  React.useEffect(function registerTargetWithMonitor() {\n    var _a = registerTarget_1.default(targetSpec.accept, handler, manager),\n        handlerId = _a.handlerId,\n        unregister = _a.unregister;\n\n    monitor.receiveHandlerId(handlerId);\n    return unregister;\n  }, [monitor]); // Can't use createSourceFactory, as semantics are different\n\n  var handler = React.useMemo(function () {\n    return {\n      canDrop: function canDrop() {\n        var canDrop = targetSpecRef.current.canDrop;\n        return canDrop ? canDrop(monitor.getItem(), monitor) : true;\n      },\n      hover: function hover() {\n        var hover = targetSpecRef.current.hover;\n\n        if (hover) {\n          hover(monitor.getItem(), monitor);\n        }\n      },\n      drop: function drop() {\n        var drop = targetSpecRef.current.drop;\n\n        if (drop) {\n          return drop(monitor.getItem(), monitor);\n        }\n      }\n    };\n  }, []);\n  return monitor;\n}\n\nexports.useDropTargetMonitor = useDropTargetMonitor;","map":null,"metadata":{},"sourceType":"script"}