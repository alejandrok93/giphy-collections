{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = require(\"react\");\n\nvar useDragSourceMonitor_1 = require(\"./internal/useDragSourceMonitor\");\n\nvar useDragDropManager_1 = require(\"./internal/useDragDropManager\");\n\nvar util_1 = require(\"./util\");\n\nvar useMonitorOutput_1 = require(\"./internal/useMonitorOutput\");\n\nvar invariant = require('invariant');\n/**\n * useDragSource hook (This API is experimental and subject to breaking changes in non-major versions)\n * @param sourceSpec The drag source specification *\n */\n\n\nfunction useDrag(spec) {\n  var item = spec.item,\n      options = spec.options,\n      preview = spec.preview,\n      previewOptions = spec.previewOptions,\n      collect = spec.collect;\n  var ref = spec.ref;\n  invariant(item != null, 'item must be defined');\n  invariant(item.type != null, 'item type must be defined');\n  var manager = useDragDropManager_1.useDragDropManager();\n  var backend = manager.getBackend();\n  var monitor = useDragSourceMonitor_1.useDragSourceMonitor(manager, spec);\n\n  if (!ref) {\n    ref = react_1.useRef(null);\n  }\n  /*\n   * Connect the Drag Source Element to the Backend\n   */\n\n\n  react_1.useEffect(function connectDragSource() {\n    var node = ref.current;\n    return backend.connectDragSource(monitor.getHandlerId(), node, options);\n  }, []);\n  /*\n   * Connect the Drag Preview Element to the Backend\n   */\n\n  react_1.useEffect(function connectDragPreview() {\n    if (preview) {\n      var previewNode = util_1.isRef(preview) ? preview.current : preview;\n      return backend.connectDragPreview(monitor.getHandlerId(), previewNode, previewOptions);\n    }\n  }, [preview && preview.current]);\n  var result = collect ? useMonitorOutput_1.useMonitorOutput(monitor, collect) : {};\n  return [result, ref];\n}\n\nexports.useDrag = useDrag;","map":null,"metadata":{},"sourceType":"script"}