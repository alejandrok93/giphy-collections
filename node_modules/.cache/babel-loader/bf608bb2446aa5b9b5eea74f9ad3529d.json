{"ast":null,"code":"// TODO: add description\nexport var column = 80;\nexport var gutter = 16;\nvar verticalRhythm = 24;\n/* A shorthand helper for applying increments of verticalRhythm\n *\n * Example:\n * `padding-top: ${rhythm(2 / 3)}px`\n */\n\nexport var rhythm = function rhythm(x) {\n  return x * verticalRhythm;\n};\nexport var maxAppWidth = column * 15;","map":{"version":3,"sources":["/Users/alejandrok/lambda-school/code-challenges/react/challenge-front-end/src/lib/constants.ts"],"names":["column","gutter","verticalRhythm","rhythm","x","maxAppWidth"],"mappings":"AAAA;AACA,OAAO,IAAMA,MAAM,GAAG,EAAf;AACP,OAAO,IAAMC,MAAM,GAAG,EAAf;AACP,IAAMC,cAAc,GAAG,EAAvB;AAEA;;;;;;AAKA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,CAAD;AAAA,SAAeA,CAAC,GAAGF,cAAnB;AAAA,CAAf;AAEP,OAAO,IAAMG,WAAW,GAAGL,MAAM,GAAG,EAA7B","sourcesContent":["// TODO: add description\nexport const column = 80;\nexport const gutter = 16;\nconst verticalRhythm = 24;\n\n/* A shorthand helper for applying increments of verticalRhythm\n *\n * Example:\n * `padding-top: ${rhythm(2 / 3)}px`\n */\nexport const rhythm = (x: number) => x * verticalRhythm;\n\nexport const maxAppWidth = column * 15;\n"]},"metadata":{},"sourceType":"module"}